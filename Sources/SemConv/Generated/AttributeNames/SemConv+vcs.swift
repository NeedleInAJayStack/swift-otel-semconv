// DO NOT EDIT. This file is generated automatically. See README for details.

// swiftlint:disable all

public extension SemConv {
    /// `vcs` namespace
    enum vcs {
        /// `vcs.repository` namespace
        public enum repository {
            /// `vcs.repository.change` namespace
            public enum change {
                /// `vcs.repository.change.id`: The ID of the change (pull request/merge request) if applicable. This is usually a unique (within repository) identifier generated by the VCS system.
                ///
                /// - Stability: experimental
                ///
                /// - Type: string
                ///
                /// - Example: `123`
                public static let id = "vcs.repository.change.id"

                /// `vcs.repository.change.title`: The human readable title of the change (pull request/merge request). This title is often a brief summary of the change and may get merged in to a ref as the commit summary.
                ///
                /// - Stability: experimental
                ///
                /// - Type: string
                ///
                /// - Examples:
                ///     - `Fixes broken thing`
                ///     - `feat: add my new feature`
                ///     - `[chore] update dependency`
                public static let title = "vcs.repository.change.title"
            }

            /// `vcs.repository.ref` namespace
            public enum ref {
                /// `vcs.repository.ref.name`: The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository.
                ///
                /// - Stability: experimental
                ///
                /// - Type: string
                ///
                /// - Examples:
                ///     - `my-feature-branch`
                ///     - `tag-1-test`
                public static let name = "vcs.repository.ref.name"

                /// `vcs.repository.ref.revision`: The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN.
                ///
                /// - Stability: experimental
                ///
                /// - Type: string
                ///
                /// The revision can be a full [hash value (see glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), of the recorded change to a ref within a repository pointing to a commit [commit](https://git-scm.com/docs/git-commit) object. It does not necessarily have to be a hash; it can simply define a [revision number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html) which is an integer that is monotonically increasing. In cases where it is identical to the `ref.name`, it SHOULD still be included. It is up to the implementer to decide which value to set as the revision based on the VCS system and situational context.
                ///
                /// - Examples:
                ///     - `9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc`
                ///     - `main`
                ///     - `123`
                ///     - `HEAD`
                public static let revision = "vcs.repository.ref.revision"

                /// `vcs.repository.ref.type`: The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository.
                ///
                /// - Stability: experimental
                ///
                /// - Type: enum
                ///     - `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                ///     - `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                ///
                /// - Examples:
                ///     - `branch`
                ///     - `tag`
                public static let type = "vcs.repository.ref.type"
            }

            /// `vcs.repository.url` namespace
            public enum url {
                /// `vcs.repository.url.full`: The [URL](https://en.wikipedia.org/wiki/URL) of the repository providing the complete address in order to locate and identify the repository.
                ///
                /// - Stability: experimental
                ///
                /// - Type: string
                ///
                /// - Examples:
                ///     - `https://github.com/opentelemetry/open-telemetry-collector-contrib`
                ///     - `https://gitlab.com/my-org/my-project/my-projects-project/repo`
                public static let full = "vcs.repository.url.full"
            }
        }
    }
}
