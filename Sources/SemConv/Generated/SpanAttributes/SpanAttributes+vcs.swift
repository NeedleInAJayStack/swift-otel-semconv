// DO NOT EDIT. This file is generated automatically. See README for details.

// swiftlint:disable all

import Tracing

extension SpanAttributes {
    /// `vcs` namespace
    public var vcs: VcsAttributes {
        get {
            .init(attributes: self)
        }
        set {
            self = newValue.attributes
        }
    }
    
    @dynamicMemberLookup
    public struct VcsAttributes: SpanAttributeNamespace {
        public var attributes: SpanAttributes
    
        public init(attributes: SpanAttributes) {
            self.attributes = attributes
        }
    
        public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
            public init() {}
    
        }
    
        /// `vcs.repository` namespace
        public var repository: RepositoryAttributes {
            get {
                .init(attributes: self.attributes)
            }
            set {
                self.attributes = newValue.attributes
            }
        }
        
        @dynamicMemberLookup
        public struct RepositoryAttributes: SpanAttributeNamespace {
            public var attributes: SpanAttributes
        
            public init(attributes: SpanAttributes) {
                self.attributes = attributes
            }
        
            public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
                public init() {}
        
            }
        
            /// `vcs.repository.change` namespace
            public var change: ChangeAttributes {
                get {
                    .init(attributes: self.attributes)
                }
                set {
                    self.attributes = newValue.attributes
                }
            }
            
            @dynamicMemberLookup
            public struct ChangeAttributes: SpanAttributeNamespace {
                public var attributes: SpanAttributes
            
                public init(attributes: SpanAttributes) {
                    self.attributes = attributes
                }
            
                public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
                    public init() {}
                    /// `vcs.repository.change.id`: The ID of the change (pull request/merge request) if applicable. This is usually a unique (within repository) identifier generated by the VCS system. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: string
                    /// 
                    /// - Example: `123`
                    public var id: Self.Key<String> { .init(name: SemConv.vcs.repository.change.id) }
            
                    /// `vcs.repository.change.title`: The human readable title of the change (pull request/merge request). This title is often a brief summary of the change and may get merged in to a ref as the commit summary. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: string
                    /// 
                    /// - Examples:
                    ///     - `Fixes broken thing`
                    ///     - `feat: add my new feature`
                    ///     - `[chore] update dependency`
                    public var title: Self.Key<String> { .init(name: SemConv.vcs.repository.change.title) }
                }
            
            
            }
        
            /// `vcs.repository.ref` namespace
            public var ref: RefAttributes {
                get {
                    .init(attributes: self.attributes)
                }
                set {
                    self.attributes = newValue.attributes
                }
            }
            
            @dynamicMemberLookup
            public struct RefAttributes: SpanAttributeNamespace {
                public var attributes: SpanAttributes
            
                public init(attributes: SpanAttributes) {
                    self.attributes = attributes
                }
            
                public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
                    public init() {}
                    /// `vcs.repository.ref.name`: The name of the [reference](https://git-scm.com/docs/gitglossary#def_ref) such as **branch** or **tag** in the repository. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: string
                    /// 
                    /// - Examples:
                    ///     - `my-feature-branch`
                    ///     - `tag-1-test`
                    public var name: Self.Key<String> { .init(name: SemConv.vcs.repository.ref.name) }
            
                    /// `vcs.repository.ref.revision`: The revision, literally [revised version](https://www.merriam-webster.com/dictionary/revision), The revision most often refers to a commit object in Git, or a revision number in SVN. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: string
                    /// 
                    /// The revision can be a full [hash value (see glossary)](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf), of the recorded change to a ref within a repository pointing to a commit [commit](https://git-scm.com/docs/git-commit) object. It does not necessarily have to be a hash; it can simply define a [revision number](https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html) which is an integer that is monotonically increasing. In cases where it is identical to the `ref.name`, it SHOULD still be included. It is up to the implementer to decide which value to set as the revision based on the VCS system and situational context. 
                    /// 
                    /// - Examples:
                    ///     - `9d59409acf479dfa0df1aa568182e43e43df8bbe28d60fcf2bc52e30068802cc`
                    ///     - `main`
                    ///     - `123`
                    ///     - `HEAD`
                    public var revision: Self.Key<String> { .init(name: SemConv.vcs.repository.ref.revision) }
            
                    /// `vcs.repository.ref.type`: The type of the [reference](https://git-scm.com/docs/gitglossary#def_ref) in the repository. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: enum
                    ///     - `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                    ///     - `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                    /// 
                    /// - Examples:
                    ///     - `branch`
                    ///     - `tag`
                    public var type: Self.Key<TypeEnum> { .init(name: SemConv.vcs.repository.ref.type) }
                    
                    public enum TypeEnum: String, SpanAttributeConvertible {
                        /// `branch`: [branch](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch)
                        case branch = "branch"
                        /// `tag`: [tag](https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag)
                        case tag = "tag"
                        public func toSpanAttribute() -> Tracing.SpanAttribute {
                            return .string(self.rawValue)
                        }
                    }
                }
            
            
            }
        
            /// `vcs.repository.url` namespace
            public var url: UrlAttributes {
                get {
                    .init(attributes: self.attributes)
                }
                set {
                    self.attributes = newValue.attributes
                }
            }
            
            @dynamicMemberLookup
            public struct UrlAttributes: SpanAttributeNamespace {
                public var attributes: SpanAttributes
            
                public init(attributes: SpanAttributes) {
                    self.attributes = attributes
                }
            
                public struct NestedSpanAttributes: NestedSpanAttributesProtocol {
                    public init() {}
                    /// `vcs.repository.url.full`: The [URL](https://en.wikipedia.org/wiki/URL) of the repository providing the complete address in order to locate and identify the repository. 
                    /// 
                    /// - Stability: experimental
                    /// 
                    /// - Type: string
                    /// 
                    /// - Examples:
                    ///     - `https://github.com/opentelemetry/open-telemetry-collector-contrib`
                    ///     - `https://gitlab.com/my-org/my-project/my-projects-project/repo`
                    public var full: Self.Key<String> { .init(name: SemConv.vcs.repository.url.full) }
                }
            
            
            }
        }
    }
}